<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <configSections>
    <section name="commerceEngine"
             type="Commerce.Engine.Configuration.CommerceEngineConfigurationSection, Commerce.Engine"></section>
  </configSections>
  <commerceEngine>
    <!-- 
         The idea here is that once we have defined the type in the type argument, 
         the engine is going to go here to instantiate that type, to know what type to use. 
         Later, if I give this engine to another customer that wants to use a different kind of Mailer component, 
         or a different kind of PaymentProcessor, all they would have to do is write a new provider, 
         and that provider is going to adhere to a specific abstraction, 
         which is going to be very similar to the dependency injection, 
         and then they just need to deploy that one component, and come into the configuration to make a change. 
         We can also give the ability to change arguments that the type may depend on. 
         In the case of the PaymentProcessor, you may need a login, and a password to get into that Payment Gateway, 
         if it's PayPal or CyberSource.
         
         -->
    <paymentProcessor name="paymentProcessor" type="Commerce.Providers.PaymentProcessor, Commerce.Providers"
                      loginName="oscar"
                      password="123"></paymentProcessor>
        <!--In the case of a Mailer component, We need to tell it what SmtpServer to use, and what FromAddress to use. 
            If you don't, you're going to have hardcode this information in the class itself, 
            We want to give it something that's configurable. 
            -->
    <mailer name="mailer" type="Commerce.Providers.Mailer, Commerce.Providers" 
              fromAddress="oscarlagatta@gmail.com" smtpServer="mail.google.com"></mailer>
  </commerceEngine>
    <startup> 
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" />
    </startup>
</configuration>